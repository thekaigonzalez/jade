#!/usr/bin/env perl
# $Id: build.plf

use File::Which;

my $zig = which("zig");

my $rel = false;

my $OPTIMIZATION_FLAGS = '';

if ( $ARGV[0] eq 'release' ) {
    $rel = true;
    $OPTIMIZATION_FLAGS = '-O ReleaseFast -Drelease-fast -fsingle-threaded';
}

if ( !-f '../.gitignore' or -m '../.gitignore' < 1 ) { # been a while lets upgrade it
    print "[build] creating .gitignore\n";
    open my $fh, '>', '../.gitignore'
      or print
"[build] note: could not create .gitignore: don't know but still going through with it.\n";
    print $fh ".jbuild\n*.o\njade_tests\n.vstags\n.vscode\n*.bin\njade/*.bin\njade/.jbuild\njade/jade";
    close $fh;
}

if ( defined $zig ) {
    print "[build] zig found: $zig\n";
    print "[build] building VJTest.zig\n";

    if (`$zig build-exe VJTest.zig --name jade_tests $OPTIMIZATION_FLAGS` > 0) { die "[build] zig build failed\n" };
    
    print "[build] verifying VJTest.zig\n";

    if (!`valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --error-exitcode=1  --log-file=".jbuild/runner-VJTest.zig.log" ./jade_tests 2>&1 ./.jbuild/runner-VJTest.zig.valgrind.output.log`) {
        warn "[build] VJTest.zig showing memory leaks\n";
    };

    print "[build] building Jade.zig\n";

    if (`$zig build-exe Jade.zig --name jade $OPTIMIZATION_FLAGS` > 0) { die "[build] zig build failed\n" };
    
    print "[build] verifying Jade.zig\n";

    if (!`valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --error-exitcode=1  --log-file=".jbuild/runner-Jade.zig.log" ./jade`) {
        warn "[build] Jade.zig showing memory leaks\n";
    };
}


print "[build] clean artifacts\n";

my $artifacts_removed = 0;

for (`ls`) {
    if (/\.o/) {
        `rm $_`;
        $artifacts_removed += 1;
    }

    if (/\.vstags/) {
        `rm $_`;
        $artifacts_removed += 1;
    }
}

printf "[build] removed %d artifacts\n", $artifacts_removed;
print "[build] done\n";
print "[build] binaries:\n";
print "[build]   - ./jade_tests\n";
print "[build]   - ./jade\n";
